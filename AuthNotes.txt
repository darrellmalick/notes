See the sample app in workspace/Authentication/AuthDemo
===========
===========


in terminal:
-------------
npm install passport passport-local passport-local-mongoose express-session --save
=============


in app.js:
-------------
var express                 = require("express"),
    mongoose                = require("mongoose"),
    passport                = require("passport"),
    bodyParser              = require("body-parser"),
    User                    = require("./models/user"),
    LocalStrategy           = require("passport-local"),
    passportLocalMongoose   = ("passport-local-mongoose");

mongoose.connect("mongodb://localhost/auth_demo_app",{ useNewUrlParser: true });
var app = express();    // "app" is express 
app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({extended: true}));
app.use(require("express-session")({
    secret: "Type some secret string here, make it different for each app.  Used to seed encryption",
    resave: false,
    saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate())); // tell passport: for the local strategy, use User.authenticate
passport.serializeUser(User.serializeUser());       //tells passport to use the methods we got from
passport.deserializeUser(User.deserializeUser());   //passport-local-mongoose and added to User model
=============


in models/user.js:
-------------
var mongoose = require("mongoose");
var passportLocalMongoose = require("passport-local-mongoose");

var UserSchema = new mongoose.Schema({
   username: String,
   password: String
});

UserSchema.plugin(passportLocalMongoose);  //adds a bunch of methods to UserSchema we need for User Authentication

module.exports = mongoose.model("User", UserSchema);
==============


in app.js re homemade MIDDLEWARE:
--------------
function isLoggedIn(request, response, next){
    if(request.isAuthenticated()){
        return next()
    };
    response.redirect("/login");
};
===============


in app.js: routes with Authentication:
---------------
// Using our homemade middleware to control access to a page:
app.get("/secret", isLoggedIn, function(request,response){
    response.render("secret");
});

// REGISTER ROUTES
// Show signup form
app.get("/register", function(request, response) {
   response.render("register"); 
});

// Submit signup form
app.post("/register", function(request,response){
    User.register(new User({username: request.body.username}), request.body.password, function(err,user){
        if(err){
            console.log(err);
            return response.render("register");
        }
        // next line runs User.serializeUser().  
        // This is where actual login happens
        // here instead of "local" you could specify facebook or twitter or google or...
        passport.authenticate("local")(request,response,function(){   
            response.redirect("/secret");
        });
    });
});

//======LOGIN ROUTES======

// Show login form
app.get("/login", function(request,response){
    response.render("login");
})

// Submit login form and process login
// passport.authenticate is "middleware" which means it runs in the middle, before the final route callback.
// syntax:  app.post("<login_url>",middleware, callback())
app.post("/login", passport.authenticate("local", {
    successRedirect: "/secret",
    failureRedirect: "/login"
}), function(request,response){
})

//======LOGOUT ROUTES======
app.get("/logout",function(request,response){
    request.logout();
    response.redirect("/");
});
=============


in views/login.ejs -- login form:
--------------
<form action="/login" method="POST">
    <input type="text" name="username" placeholder="username">
    <input type="password" name="password" placeholder="password">
    <button>Login</button>  
</form>
==============


in /views/register.ejs - registration form:
--------------
<form action="/register" method="POST">
    <input type="text" name="username" placeholder="username">
    <input type="password" name="password" placeholder="password">
    <button>Submit</button>  <!--html tip: as long as the button is at the end of the form it will submit the form-->
</form>